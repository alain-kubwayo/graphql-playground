From Playground: https://countries.trevorblades.com/
Repo: https://github.com/trevorblades/countries

input UserInput {
  id: ID 
  name: String
}

type Query {
  users: [User]
  user(input: UserInput): User
}

type User {
  id: ID!
  name: String!
  age: Int!
  height: Float!
  isMarried: Boolean
  friends: [User!]
  videosPosted: [Video!]
}

type Video {
  id: ID!
  title: String!
  description: String!
}

# Querying info using GraphQL

{
  country(code: "US") {
    code 
    name 
    phone 
    capital
    currency
    continent {
      code 
      name
      countries {
        name
        capital
      }
    }
  }
}

# Querying languages 
{
  languages {
    code 
    name 
    native 
    rtl
  }
}

{
  country (code: "RW") {
    name
    capital 
    currency
  }
}

Building GraphQL API:

- JavaScript
- NodeJS
- Apollo Server Library: one of the most famous GraphQL libraries out there to create your GraphQL API. It has a really good community


In the terminal: initialize a new Nodejs project like so:
$ npm init (place enter to all the questions) to get a package.json file
$ npm install apollo-server graphql (install Apollo library which will allow us to make our API into an API that serves GraphQL) Also need to install graphql core package because it is needed in order to write actual GraphQL language. 
$ npm install nodemon (to remove the need to keep restarting our server every time a change is made)

Add the following to package.json:
scripts: { “start”: “nodemon index.js”}  => npm start will then run nodemon into our packages


Inside the index.js:
// typeDefs contains all the types we define.
schema => type-defs.js
const { gql } = require(‘Apollo-server’);


Const typeDefs = gql`
	type Query {
		users 
		friends
	}
`

Install Apollo GraphQL extension to get some code syntax highlighting for the code we write in the back ticks. 

// resolvers are simply functions that deal with the data. E.g. make a database call to insert data into a database, etc.

It's standard to have enums defined as capital letters. Make sure the data is also in capital letters.

enum Nationality {
  RWANDA
  FRANCE
  GHANA
}

type User {
  nationality: Nationality!
}

id should be either a string or a number
const user = _.find(UserList, { id: Number(id) })